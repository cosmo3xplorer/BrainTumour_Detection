import os
import cv2
import glob
import matplotlib.pyplot as plt
import numpy as np
from mpl_toolkits.axes_grid1 import ImageGrid

tumor_images = []
for name in glob.glob('D:\Sw\Python_project\BrainTumor\yes\*.jpg'):
    image = cv2.imread(name)
    image = cv2.resize(image, (240, 240))
    tumor_images.append(image)
fig = plt.figure(figsize=(10., 10.))
grid = ImageGrid(fig, 111, nrows_ncols=(4, 4), axes_pad=0.1, )
for ax, im in zip(grid, tumor_images[0:16]):
    ax.imshow(im)
plt.show()
img_path = "D:\Sw\Python_project\BrainTumor\yes\Y104.jpg"
image = cv2.imread(img_path)
print("width: {} pixels".format(image.shape[1]))
print("height: {} pixels".format(image.shape[0]))
print("channels: {}".format(image.shape[2]))
dim = (500, 590)
image = cv2.resize(image, dim)
cv2.imshow('Window1', image)
cv2.waitKey(0)
cv2.destroyAllWindows()
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY, 0.7)
cv2.imshow('Window2', gray)
cv2.waitKey(0)
cv2.destroyAllWindows()
(T, thresh) = cv2.threshold(gray, 155, 255, cv2.THRESH_BINARY)
cv2.imshow('Window3', thresh)
cv2.waitKey(0)
cv2.destroyAllWindows()
(T, threshInv) = cv2.threshold(gray, 155, 255, cv2.THRESH_BINARY_INV)
cv2.imshow('Window4', threshInv)
cv2.waitKey(0)
cv2.destroyAllWindows()
kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (10, 5))
closed = cv2.morphologyEx(thresh, cv2.MORPH_CLOSE, kernel)
cv2.imshow('Window5', closed)
cv2.waitKey(0)
cv2.destroyAllWindows()
closed = cv2.erode(closed, None, iterations = 20)
closed = cv2.dilate(closed, None, iterations = 19)
cv2.imshow('Window6', closed)
cv2.waitKey(0)
cv2.destroyAllWindows()
ret, mask=cv2.threshold(closed, 155, 255, cv2.THRESH_BINARY)
# applying AND operation on image and mask generated by the thresholding
final = cv2.bitwise_and(image, image, mask = mask)
# plotting the result
cv2.imshow('Window7', final)
cv2.waitKey(0)
cv2.destroyAllWindows()

def auto_canny(image, sigma = 0.33):
    # computing the median of the single channel pixel intensities
    v = np.median(image)
    # applying automatic Canny edge detection using the computed median
    lower = int(max(0, (1.0 - sigma) * v))
    upper = int(min(255, (1.0 + sigma) * v))
    edged = cv2.Canny(image, lower, upper)
    # returning the edged image
    return edged

canny = auto_canny(closed)
cv2.imshow('Window8', canny)
cv2.waitKey(0)
cv2.destroyAllWindows()

(cnts, _) = cv2.findContours(canny.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
cv2.drawContours(image, cnts, -1, (0, 0, 255), 2)
cv2.imshow('Window9', image)
cv2.waitKey(0)
cv2.destroyAllWindows()